plugins {
    id 'java'
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

version = project.mod_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven {
        name 'ParchmentMC'
        url 'https://maven.parchmentmc.org/'
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    implementation 'com.github.oshi:oshi-core:6.2.2'
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) { from components.java }
    }

    // Add repositories to publish to
    repositories {
        // GitHub Packages (https://pkg.github.com)
        maven {
            name 'GitHub'
            url "https://maven.pkg.github.com/${project.github_repo}"
            credentials {
                username System.getenv('GITHUB_ACTOR')
                password System.getenv('GITHUB_TOKEN')
            }
        }
    }
}

/*
curseforge {
    // Set the API token from the environment
    apiKey System.getenv('CURSEFORGE_TOKEN') ?: ''

    // Declare all projects
    project {
        // Set the project id
        id = project.cf_project_id
        // Set the release type
        releaseType = project.version.contains('alpha') ? 'alpha' : project.version.contains('beta') ? 'beta' : 'release'
        // Set the release notes
        changelog = project.getChangelogNotes()
        // Add all supported game versions
        project.cf_game_versions.split(', ').each { addGameVersion it }
        // Add the main artifact
        mainArtifact(remapJar) { displayName = "${project.mod_name} v${project.version} for Minecraft ${project.minecraft_version}" }
        // Add any additional artifacts
        addArtifact remapSourcesJar
        addArtifact javadocJar
        subprojects.each {
            addArtifact it.remapJar
            addArtifact it.remapSourcesJar
            addArtifact it.javadocJar
        }
        // Add any dependencies
        relations {
            if (project.cf_relations_required) project.cf_relations_required.split(', ').each { requiredDependency it }
            if (project.cf_relations_optional) project.cf_relations_optional.split(', ').each { optionalDependency it }
            if (project.cf_relations_embedded) project.cf_relations_embedded.split(', ').each { embeddedLibrary it }
            if (project.cf_relations_tools) project.cf_relations_tools.split(', ').each { tool it }
            if (project.cf_relations_incompatible) project.cf_relations_incompatible.split(', ').each { incompatible it }
        }
    }

    // Configure other options
    options {
        forgeGradleIntegration = false
        debug = System.getenv('CURSEFORGE_DEBUG') as boolean ?: false
    }
}
*/